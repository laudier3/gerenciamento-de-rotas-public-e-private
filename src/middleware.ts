import { NextResponse, type MiddlewareConfig, type NextRequest } from "next/server"

// üîì Lista de rotas p√∫blicas
// Cada rota pode ter um comportamento definido para quando o usu√°rio j√° estiver autenticado:
// - "redirect" ‚Üí se o usu√°rio estiver logado, redireciona para a p√°gina inicial
// - "next" ‚Üí permite o acesso normalmente
const publicRoutes = [
    { path: '/home', whenAutenticated: 'redirect' },
    { path: '/login', whenAutenticated: 'redirect' },
    { path: '/pricing', whenAutenticated: 'next' },
]

// üîí Rota padr√£o para redirecionamento quando o usu√°rio n√£o est√° autenticado
const REDIRECT_WHEN_NOT_AUTHENTICATED_ROUTE = '/login'

export function middleware(request: NextRequest) {
    const path = request.nextUrl.pathname
    const publicRoute = publicRoutes.find(route => route.path === path)
    const authToken = request.cookies.get('token') // Token de autentica√ß√£o salvo em cookies

    // Caso n√£o haja token e a rota seja p√∫blica ‚Üí permite o acesso
    if (!authToken && publicRoute) {
        return NextResponse.next()
    }

    // Caso n√£o haja token e a rota N√ÉO seja p√∫blica ‚Üí redireciona para login
    if (!authToken && !publicRoute) {
        const redirectUrl = request.nextUrl.clone()
        redirectUrl.pathname = REDIRECT_WHEN_NOT_AUTHENTICATED_ROUTE
        return NextResponse.redirect(redirectUrl)
    }

    // Caso exista token e a rota seja p√∫blica, mas marcada como "redirect" ‚Üí envia usu√°rio para "/"
    if (authToken && publicRoute && publicRoute?.whenAutenticated == 'redirect') {
        const redirectUrl = request.nextUrl.clone()
        redirectUrl.pathname = '/'
        return NextResponse.redirect(redirectUrl)
    }

    // Caso exista token e a rota seja privada ‚Üí acesso permitido
    if (authToken && !publicRoute) {
        return NextResponse.next()
    }

    // Caso nenhuma das condi√ß√µes anteriores seja atendida ‚Üí segue normalmente
    return NextResponse.next()
}

// ‚öôÔ∏è Configura√ß√£o do matcher
// Esse padr√£o garante que o middleware seja executado em todas as rotas,
// exceto rotas da API, arquivos est√°ticos e metadados do Next.js
export const config: MiddlewareConfig = {
    matcher: [
        '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)',
    ],
}
